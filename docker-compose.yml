version: '3'

services:
  mysqldb:
    image: mysql:8.0
    container_name: mysqldb
    networks:
      - account-client-network
    restart: always
    env_file: ./.env
    command: ["mysqld", "--init-file=/docker-entrypoint-initdb.d/BaseDatos.sql"]
    volumes:
      - ./BaseDatos.sql:/docker-entrypoint-initdb.d/BaseDatos.sql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", "-uroot", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 5s
      timeout: 5s
      retries: 20
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    networks:
      - account-client-network
    ports:
      - "2181:2181"
  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    networks:
      - account-client-network
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: EXTERNAL_SAME_HOST://:29092,INTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL_SAME_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL_SAME_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_DELETE_TOPIC_ENABLE: "true"
  account:
    build:
      context: account-service
      dockerfile: Dockerfile
    image: account-service:account-service-1.0
    container_name: account-service
    restart: on-failure:5
    deploy:
      restart_policy:
          condition: any
          delay: 5s
          window: 120s
    env_file: ./.env
    networks:
      - account-client-network
    ports:
      - "8081:8081"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    depends_on:
      kafka: 
        condition: service_started
      mysqldb:
        condition: service_healthy
  client:
    build:
      context: client-service
      dockerfile: Dockerfile
    image: client-service:client-service-1.0
    container_name: client-service
    restart: on-failure
    deploy:
      restart_policy:
          condition: any
          delay: 5s
          window: 120s
    env_file: ./.env
    networks:
      - account-client-network
    ports:
      - "8082:8082"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    depends_on:
      kafka: 
        condition: service_started
      mysqldb:
        condition: service_healthy

networks:
  account-client-network:
    driver: bridge